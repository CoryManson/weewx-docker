---
name: build

on: [push]

env:
  IMAGE_NAME: felddy/weewx
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Cache pip test requirements
        uses: actions/cache@v1
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "${{ runner.os }}-pip-test-\
            ${{ hashFiles('**/requirements-test.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-test-
            ${{ runner.os }}-pip-
      - name: Cache pre-commit hooks
        uses: actions/cache@v1
        with:
          path: ${{ env.PRE_COMMIT_CACHE_DIR }}
          key: "${{ runner.os }}-pre-commit-\
            ${{ hashFiles('**/.pre-commit-config.yaml') }}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements-test.txt
      - name: Run linters on all files
        run: pre-commit run --all-files
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Determine image version
        id: get_ver
        run: |
          echo "##[set-output name=version;]$(./bump_version.sh show)"
      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: Build docker image
        run: |
          version=$(./bump_version.sh show)
          docker buildx build \
            --platform \
              linux/386,linux/amd64,linux/arm/v6,linux/arm/v7, \
              linux/arm64,linux/ppc64le,linux/s390x \
            --output "type=image,push=false" \
            --tag "$IMAGE_NAME" \
            --build-arg GIT_COMMIT=$(git log -1 --format=%H) \
            --build-arg GIT_REMOTE=$(git remote get-url origin) \
            --build-arg VERSION=${{ steps.get_ver.outputs.version }} \
            .
      - name: Save docker image artifact
        run: |
          mkdir dist
          version=$(./bump_version.sh show)
          docker save $IMAGE_NAME:latest | gzip > dist/image.tar.gz
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Cache pip test requirements
        uses: actions/cache@v1
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "${{ runner.os }}-pip-test-\
            ${{ hashFiles('**/requirements-test.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-test-
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements-test.txt
      - name: Download docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Load docker image
        run: docker load < dist/image.tar.gz
      - name: Create data volume mount
        run: |
          mkdir data
          chmod a+rwx data
      - name: Generate test configuration
        run: docker-compose run weewx --gen-test-config
      - name: Run tests
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: pytest
